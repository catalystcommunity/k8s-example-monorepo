"Declare dependencies for bzlmod, see https://bazel.build/build/bzlmod"

# based on https://github.com/aspect-build/bazel-examples/blob/main/MODULE.bazel

# We declare all of the direct dependencies of all of the code in this
# workspace. A single version of each of these is declared, implying that all of
# the code will use the same version of all of these tools and libraries listed.
# For bzlmod dependencies, this implements the "single version policy".

bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "gazelle", version = "0.38.0")
bazel_dep(name = "aspect_rules_js", version = "2.0.1")
bazel_dep(name = "aspect_rules_swc", version = "2.0.0")
bazel_dep(name = "aspect_rules_ts", version = "3.1.0")
bazel_dep(name = "rules_buf", version = "0.3.0")
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "rules_python", version = "0.35.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.35.0")
bazel_dep(name = "rules_rust", version = "0.50.1")
bazel_dep(name = "toolchains_llvm", version = "1.1.2")
bazel_dep(name = "toolchains_protoc", version = "0.3.3")

#########################
# Hermetic C++ toolchain, to relieve the dependency on a locally installed CC etc.
# available versions are listed in the toolchain repository:
# https://github.com/bazel-contrib/toolchains_llvm/blob/master/toolchain/internal/llvm_distributions.bzl
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_versions = {
        "": "17.0.6",
        "darwin-aarch64": "17.0.6",
        "darwin-x86_64": "17.0.6",
    },
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

#########################
# Protobuf and gRPC
# https://github.com/aspect-build/toolchains_protoc

buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")
buf.toolchains(version = "v1.34.0")  #see https://github.com/bufbuild/buf/releases
use_repo(buf, "rules_buf_toolchains")

# This Aspect-provided protobuf toolchain removes the need to compile ProtoC from
# source, speeding up builds where a cached protoc isn't used.
protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
protoc.toolchain(
    google_protobuf = "com_google_protobuf",
    version = "LATEST",
)
use_repo(protoc, "com_google_protobuf", "toolchains_protoc_hub")

register_toolchains("@llvm_toolchain//:all")

register_toolchains("@toolchains_protoc_hub//:all")

#########################
# JavaScript and TypeScript
# https://github.com/aspect-build/rules_js/tree/main/e2e/bzlmod
# https://github.com/aspect-build/rules_ts/tree/main/e2e/bzlmod

# In keeping with the single version policy, in this example, the NPM ecosystem
# dependencies are specified at the top level rather than in each sub-project.
# However, it is possible to have multiple different sets of NPM dependencies
# across a workspace.

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to get a local node_modules tree, using
# bazel run -- @pnpm//:pnpm --dir $PWD install
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

#########################
# Go
# See https://github.com/bazelbuild/rules_go/blob/master/docs/go/core/bzlmod.md
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = "1.23.1",
)
use_repo(go_sdk, "go_sdk")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

#########################
# Rust
# See https://bazelbuild.github.io/rules_rust/#bzlmod
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.81.0"],
)
